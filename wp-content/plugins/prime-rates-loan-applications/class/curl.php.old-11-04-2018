<?php 
global $wpdb;
global $tableName;
require_once 'mandrillHandler.php';
class Curl
{

	public function logApiCall($url,$method,$contentType,$params,$response){
		global $wpdb;
		global $tableName;
		if(is_array($params) || is_object($params)){
			$requestParams = json_encode($params);
		}else{
			$requestParams = $params;
		}
		$requestParams = $this->maskRequestParams($requestParams);
		if(is_array($response) || is_object($response)){
			$responseParams = json_encode($response);
		}else{
			$responseParams = $response;
		}
		$data = array(
			'request_url'=>$url,
			'method'=>$method,
			'content_type'=>'Content-Type: '.$contentType,
			'request_params'=>$requestParams,
			'response_params'=>$responseParams,
			'created_at'=>date('Y-m-d H:i:s'),
			'updated_at'=>date('Y-m-d H:i:s')
		);
		
		$wpdb->insert( $tableName, $data);
		//echo $wpdb->last_query ;
		/*if($wpdb->last_error !== '') {
			$wpdb->print_error();
		}*/
	}
    public function callApi($url, $method, $contentType='text/plain', $arguments = array(), $encodeData = true, $returnHeaders = false)
    {
		$curl_request = curl_init();
		$headers = array("Content-Type: $contentType");
		if(isset($arguments['destination'])){
			switch ($arguments['destination']){
				case 'mandrill':
					$curl_request = curl_init($url);
					curl_setopt($curl_request, CURLOPT_USERPWD, 'user:' . $arguments['apiKey']);
					unset($arguments['apiKey']);
					break;
				default:
					break;
			}
			unset($arguments['destination']);
		}
        if ($method == 'GET' && $arguments) {
            $url .= "?" . http_build_query($arguments);
        }
        if ($method == 'POST') {
            curl_setopt($curl_request, CURLOPT_POST, 1);
        } else {
            curl_setopt($curl_request, CURLOPT_CUSTOMREQUEST, $method );
        }
        curl_setopt($curl_request, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($curl_request, CURLOPT_HEADER, false);
        curl_setopt($curl_request, CURLOPT_URL, $url);
		curl_setopt($curl_request, CURLOPT_TIMEOUT, 30);
        curl_setopt($curl_request, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($curl_request, CURLOPT_SSL_VERIFYPEER, false);
        if (!empty($arguments) && $method !== 'GET') {
            if ($encodeData) {
                //encode the arguments as JSON
               $arguments = json_encode($arguments);
			   
            }
            curl_setopt($curl_request, CURLOPT_POSTFIELDS, $arguments);
        }
//echo $arguments;exit;
        $result = curl_exec($curl_request);
		$httpcode = curl_getinfo($curl_request, CURLINFO_HTTP_CODE);
        if ($returnHeaders) {
            //set headers from response
            list($headers, $content) = explode("\r\n\r\n", $result, 2);
            foreach (explode("\r\n", $headers) as $header) {
                header($header);
            }

            //return the nonheader data
            return trim($content);
        }
        curl_close($curl_request);
        //decode the response from JSON
		if($encodeData){
			$response = json_decode($result);
			if(!$response){
				$response = $result;
			}
		}else{
			$response = $result;
		}
        if(is_array($response)){
			$response['http_code'] =  $httpcode;
		}else{
			$response = (array)$response;
			$response['http_code'] =  $httpcode;
			$response =  (object)$response;
		}
		if($httpcode!=200){
			$this->sendErrorMail($url, $method, $contentType, $arguments ,$response);
		}
		$this->logApiCall($url, $method, $contentType, $arguments ,$response);
        return $response;
    }
	private function sendErrorMail($url, $method, $contentType, $arguments ,$response){
		$objMandrill = New MandrillHandler();
		$response = $objMandrill->sendErrorEmail($url, $method, $contentType, $arguments ,$response);
	}
	private function maskRequestParams($params){
		$isObject = false;
		if(is_object($params)){
			$isObject = true;
			$params = (array)$params;
		}else if(is_array($params)){
			$params = $params;
		}else{
			$params = json_decode($params);
			if($params){
				if(is_object($params)){
					$isObject = true;
					$params = (array)$params;
				}
			}
		}
		if(isset($params['Request'])){
			$params['Request'] = (array)$params['Request'];
			$maskFields = array('confirm_ssn','confirmemail','firstname','email','lastname','phonenumber','ssn','streetaddress');
			foreach($params['Request'] as $index=>$value){
				if(in_array($index,$maskFields)){
					$value = trim($value);
					if($value){
						$valueArray = str_split($value);
						$maskedString='';
						foreach($valueArray as $valueChar){
							$maskedString.='*';
						}
						$params['Request'][$index] = $maskedString;
					}
				}
				
			}
		}
		if($isObject){
			$params = (object)$params;
		}
		return json_encode($params);
	}
}
?>